/**
 * @param {number} x
 * @param {number} n
 * @return {number}
 */

var myPow = function(x, n) {
    var sign = 1
    if (n < 0) {
        sign = -1
        n = -n
    }
    var result = 1
    for (var i = 0; i < n; i++) {
        result *= x
    }

    if (sign == -1) {
        return 1 / result
    }
    return result
}

var myPow = function(x, n) {
    if (n < 0) {
        return 1 / myPow(x, -n)
    }
    if (n == 0) {
        return 1
    }
    if (n % 2 == 0) {
        var t = myPow(x, n >>> 1)
        return t * t
    } else {
        var t = myPow(x, n >>> 1)
        return t * t * x
    }
}
var myPow = function(x, n) {
    if (n < 0) {
        return 1 / myPow(x, -n)
    }
    if (n == 0) {
        return 1
    }
    if (n % 2 == 0) {
        return myPow(x * x, n >>> 1)
    } else {
        return myPow(x * x, n >>> 1) * x
    }
}


var myPow = function(x, n) {
    if (n < 0) {
        return 1 / myPow(x, -n)
    }
    var result = 1

    var stillNeed = n

    while(stillNeed > 0) {
        var t = x
        var e = 1 // e记录的是t目前是x的几次方
        while(e * 2 <= stillNeed) {
            t = t * t
            e = 2 * e
        }
        result *= t // t此时是x的e次方
        stillNeed = stillNeed - e
    }
    return result
}


var myPow = function(x, n) {
    if (n < 0) {
        return 1 / myPow(x, -n)
    }
    var result = 1

    var t = x
    while (n > 0) {
        if (n & 1) {//看此时n的个位数是不是1，如果是1，说明此时的t需要被累乘到结果上
            result *= t
        }
        t = t * t // t将依次经历x的2，4，8，16，。。。次方
        n = n >>> 1
    }
    return result
}













var myPow2 = function(x, n) {
    var digitWidth = Math.floor(Math.log2(n))
    var t = 1
    
    while (digitWidth >= 0) {
        var d = (n >> digitWidth) % 2
        if (d == 1) {
            t = t * t * x
        } else {
            t = t * t
        }
        digitWidth--
    }
    
    return t
};


var myPow3 = function(x, n) {
    var result = 1
    var t = x
    var m = 1
    while (true) {
        if (m * 2 < n) {
            t = t * t
            m = m * 2
        } else {
            result *= t
            n = n - m
            t = x
            m = 1
        }
    }
};





var addStrings = function(num1, num2) {
    // return String(Number(num1) + Number(num2))

    var i = num1.length - 1;
    var j = num2.length - 1;

    var r = ''
    var carry = 0 // 进位

    while(i >= 0 || j >= 0) {
        var a = Number(num1[i--] || 0)
        var b = Number(num2[j--] || 0)

        var s = a + b + carry
        r = s % 10 + r
        carry = s >= 10 ? 1 : 0
    }

    if (carry) {
        r = 1 + r
    }

    return r
}

https://leetcode.com/problems/multiply-strings/
https://leetcode.com/problems/sort-an-array/description/

